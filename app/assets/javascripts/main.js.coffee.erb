window.ANALYTICS ||= {}
ANALYTICS.controllers ||= {}


ANALYTICS.identify = (user) ->
  analytics.identify user.id,
    name: user.first_name+" "+user.last_name
    email: user.email
    events_attended: user.events_attended
    created_at: user.created_at
    chef: user.chef
    phone: user.phone
    last_signed_in: user.last_signed_in_at

ANALYTICS.track = (action) ->
  if window.current_user?
    analytics.track action,
      user: window.current_user.id
  else
    analytics.track action

ANALYTICS.page = (page) ->
  analytics.page page

#ANALYTICS.track = (action) ->
#  try
#    key = "testing NENE1"
#    if window.current_user?
#      user = window.current_user.id
#    else
#      user = "unregistered"
#    mixpanel.track(action, {user: user})
#  catch error
#    console.log error

Simmr.factory "Follow", ["railsResourceFactory", (railsResourceFactory) ->
  railsResourceFactory
    url: "/api/follows"
    name: "follow"
]

Simmr.factory "Event", ["railsResourceFactory", (railsResourceFactory) -> railsResourceFactory
    url: "/api/events"
    name: "event"
]

Simmr.factory "Charge", ["railsResourceFactory", (railsResourceFactory) ->
  railsResourceFactory
    url: "/api/charges"
    name: "charge"
]

Simmr.factory "User", ["railsResourceFactory", (railsResourceFactory) ->
  railsResourceFactory
    url: "/api/user"
    name: "user"
]

Simmr.factory "Guest", ["railsResourceFactory", (railsResourceFactory) ->
  railsResourceFactory
    url: "/api/guests"
    name: "guest"
]

Simmr.directive "heart", ->
  {
  restrict: 'E'
  scope:
    followableType: "="
    followableId: "="
    userId: "="
  templateUrl: "<%= asset_path('templates/heart.html') %>"
  }

Simmr.controller "HeartCtrl", ["$scope","$http",  "$routeParams", "Follow", ($scope,$http, $routeParams, Follow) ->
  $scope.join = false

  $scope.addFollower = (followable_type_val, followable_id_val, user_signed_in, number_followers) ->
    if user_signed_in
      #console.log "Follow Information:*******"
      #console.log followable_type_val
      #console.log followable_id_val
      #console.log number_followers
      #console.log $(this)
      #console.log $scope.this
      $scope.follows = number_followers
      $http({method:'GET',url:'/api/follows',params:{followable_id:followable_id_val,followable_type:followable_type_val}}).success (result) ->
        #Follow.get(params:[followable_id:followable_id_val,followable_type:followable_type_val]).then (result) ->
        if result.length > 0
          $scope.confirm = confirm("Are you sure you want to unfollow?")
          if ($scope.confirm == true) 
            $scope.following = false;
            $scope.join = false;
            $http({method:'DELETE',url:"/api/follows/#{result[0].id}"}).success (result) ->
              #destroy follow with confirmation
              #console.log "Destroyed Follow"
              $scope.follows--
            
        else
          $scope.following = true;
          $http({method:'POST',url:'/api/follows',params:{followable_id:followable_id_val,followable_type:followable_type_val}}).success (result) ->
            $scope.join = true;
            #console.log "Created Follow"
            $scope.follows++


  $scope.follow = (followable_type_val, followable_id_val, user_signed_in)->
    if user_signed_in
      #console.log "Follow Information:*******"
      #console.log followable_type_val
      #console.log followable_id_val
      $http({method:'GET',url:'/api/follows',params:{followable_id:followable_id_val,followable_type:followable_type_val}}).success (result) ->
        #Follow.get(params:[followable_id:followable_id_val,followable_type:followable_type_val]).then (result) ->
        if result.length > 0
          $scope.confirm = confirm("Are you sure you want to unfollow?")
          if ($scope.confirm == true) 
            $scope.following = false;
            $http({method:'DELETE',url:"/api/follows/#{result[0].id}"}).success (result) ->
              #destroy follow with confirmation
              $scope.join = false
              #console.log "Destroyed Follow"
            
        else
          $scope.following = true;
          $http({method:'POST',url:'/api/follows',params:{followable_id:followable_id_val,followable_type:followable_type_val}}).success (result) ->
            $scope.join = true
            #console.log "Created Follow"  

]

Simmr.controller "HeaderCtrl", ["$scope",  "$routeParams", ($scope, $routeParams) ->
  $scope.search = (searchQuery) ->
    window.location= "/events?q=#{searchQuery}"
  $scope.keypressCallback = ($event) ->
    $scope.search($scope.searchQuery)
    $event.preventDefault()
  if window.current_user?
    ANALYTICS.identify(window.current_user)
]

Simmr.controller "HomeIndexCtrl", ["$scope",  "$routeParams", "$location", ($scope, $routeParams, $location) ->
  Simmr.scopes ||= {}  
  Simmr.scopes.home = $scope
  if window.current_user?
    ANALYTICS.identify(window.current_user)
  $scope.appear = ''
  if location.search == '?foodie=true'
    $("#sign_up_foodie").modal('show')
  if location.search == '?foodie=false'
    $("#sign_up_business").modal('show')
]

Simmr.controller "EventRegisterCtrl", ["$scope",  "$http", "$routeParams", "$location", "Charge", "Event", "Guest", ($scope, $http, $routeParams, $location, Charge, Event, Guest) ->
  ANALYTICS.track("Visited event page: "+$scope.eventId)
  ANALYTICS.page("Event")
  Simmr.scopes ||= {}  
  Simmr.scopes.event = $scope

  if location.search == '?grabSeats'
    $scope.showSeats = true
    ANALYTICS.page("Grab Seats")

  if location.search == '?waitList'
    $scope.waitlist = true
    ANALYTICS.page("Join Waitlist")

  $scope.guests = []
  $scope.event = []
  $scope.referee_discount=0

  $scope.guest = {}
  $scope.guest.first_name = ''
  $scope.guest.last_name = ''
  $scope.guest.email = ''
  $scope.buyer = {}

  $scope.expirationMonths = [
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '10',
    '11',
    '12' ]

  $scope.expirationYears = [
    '2013',
    '2014',
    '2015',
    '2016',
    '2017',
    '2018',
    '2019',
    '2020',
    '2021',
    '2022',
    '2023',
    '2024' ]

  $scope.trackThis = (note) ->
    ANALYTICS.track(note)

  $scope.eventDate = ->
    moment($scope.event.date).format("dddd, MMMM D")

  $scope.eventTime = ->
    moment($scope.event.time, "YYYY-MM-DD H:mm:ss").format("h:mm A")
  
  $scope.eventEndTime = ->
    datetime = moment($scope.event.time,  "YYYY-MM-DD H:mm:ss")
    datetime.add('minutes', $scope.event.length).format('h:mm A')

  $scope.mapUrl = ->
    mapUrl = "http://maps.google.com/?q=#{$scope.address1},#{$scope.city}, #{$scope.state},#{$scope.zipcode}"

  $scope.total = ->
    if $scope.event.referer_discount
      current_discount=$scope.event.referer_discount*($scope.num_guests-1)
      total = $scope.num_guests * $scope.cost - $scope.referee_discount - current_discount
      if $scope.num_guests-1==0
        $scope.discount_note=""
      else if $scope.num_guests-1==1
        $scope.discount_note="Thanks for bringing a guest! We applied a referral discount of $"+current_discount+" to your purchase!"
      else if $scope.num_guests>=2
        $scope.discount_note="Thanks for bringing guests! We applied a referral discount of $"+current_discount+" to your purchase!"
    else if $scope.event.wine_pairing
      total = $scope.num_guests * (+$scope.cost+ +"32") - $scope.referee_discount
    else
      total = $scope.num_guests * $scope.cost - $scope.referee_discount
    total = total.toFixed(2)
    $scope.total_val=total

  $scope.eventRevenue = ->
    total = $scope.guestsCount * $scope.cost
    total = total.toFixed(0)

  $scope.checkReferralCode = (code) ->
    $http(
      method:'GET'
      url:'/api/referral_code_check'
      params:{referral_code:code, event_id:$scope.eventId}
    ).success (result) ->
      #console.log(result)
      $scope.discount_stuff=result
      if $scope.discount_stuff.applied
        $scope.referee_discount=$scope.discount_stuff.referral_code.referee_discount
        $scope.total()

  $scope.showPayment = (wait) ->
    ANALYTICS.page("Insert Guest Information")
    $scope.guests = []
    $scope.guest_no_pages = 0
    if $scope.num_guests > 0
      homie=$scope.currentUser
      currentGuy={}
      currentGuy.first_name=homie.first_name
      currentGuy.last_name=homie.last_name
      currentGuy.email=homie.email
      currentGuy.userId=homie.id
      currentGuy.eventId=$scope.eventId
      currentGuy.waiting=wait
      $scope.guests.push(currentGuy)
      i = 0
      
      while i < $scope.num_guests - 1
        $scope.guests.push({})
        i++
    if wait
      $scope.appear = "waitlist1"
    else
      $scope.appear = "payment1"

  $scope.addtoWaitlist = ->
    ANALYTICS.page("Insert Waitlist Information")
    angular.forEach($scope.guests, (guest) =>
      guest.eventId=$scope.eventId
      guest.waiting=true
      new Guest(guest).create().then (data) =>
        #console.log data, "~~~~~~~~~~~"
    )
    $scope.appear = "waitlist2"

  $scope.gotoPayment = ->
    $scope.trackThis("Clicked Go To Payment for Event: "+$scope.eventId)
    error = 0
    angular.forEach($scope.guests, (guest) =>
      if typeof guest.first_name is 'undefined' || typeof guest.email is 'undefined' || guest.last_name is 'undefined'
        error = 1
    )
    if error == 0
      $scope.appear = "payment2"

  $scope.submitPayment = ->
    $scope.trackThis("Clicked Submit Payment for Event: "+$scope.eventId)    
    $scope.submitCard($scope.card)

  $scope.card =
    number: ""
    expMonth: ""
    expYear: ""
    cvc: ""

  $scope.data = {}
  $scope.cardErrorMessages={}
  $scope.cardErrorMessages2=""
  $scope.submitCard = (card) ->
    Stripe.setPublishableKey('pk_live_GMpAJtBVaEM89F4af1CHfLTy')
    #Stripe.setPublishableKey('pk_test_XfS3clm6Vu4Uhyne1zheh4lV')
    card.name=$scope.buyer.name
    Stripe.createToken card, (status, response) ->
      if status is 200
        #console.log response
        $scope.data.last4 = response.card.last4
        $scope.data.token = response.id
        $scope.data.guests = $scope.guests
        $scope.data.buyer = $scope.buyer
        $scope.data.eventId = $scope.eventId
        $scope.data.amount = $scope.total()
        $scope.data.discount_stuff=$scope.discount_stuff

        new Charge($scope.data).create().then (data) =>
          #console.log data, "~~~~~~~~~~"
          if data.status == "Success"
            $scope.code=data.code
            $scope.appear = "payment3"
            $scope.trackThis("Paid for "+ $scope.eventId)
          if data.status == "Failure"
            $scope.cardErrorMessages=data.messages
            $scope.card.expYear = $scope.card.exp_year
            $scope.card.expMonth = $scope.card.exp_month

      else
        $scope.cardErrorMessages2 = response.error.message
        $scope.$apply()
        #console.log($scope.cardErrorMessages2)
]

Simmr.controller "EventCreateCtrl", ["$scope",  "$routeParams", "$location", "Event", ($scope, $routeParams, $location, Event) ->
  $scope.created = false
  $scope.eventImageUrls = []
  $scope.eventMenu = []
  $scope.today = moment().format("YYYY-MM-DD")

  $scope.eventDate = ->
    moment($scope.event.date).format("dddd, MMMM D")

  $scope.eventTime = ->
    moment($scope.event.time, "YYYY-MM-DD H:mm:ss").format("h:mm A")
  
  $scope.eventEndTime = ->
    datetime = moment($scope.event.time,  "YYYY-MM-DD H:mm:ss")
    datetime.add('minutes', $scope.event.length).format('h:mm A')

  $scope.uploadImages = ->
    filepicker.pickAndStore
      mimetypes: ["image/*", "text/plain"]
      services: ["COMPUTER", "FACEBOOK", "GMAIL", "INSTAGRAM"]
      multiple: true
    ,
      location: "S3"
      access: "public"
    , (InkBlobs) ->
      #console.log JSON.stringify(InkBlobs)

      $('.default').remove()
      $('.carousel-inner').empty()
      $scope.eventImageUrls = []

      i=0
      while i< Object.keys(InkBlobs).length
        $scope.image="#{InkBlobs[i].url}"
        #console.log $scope.image
        $scope.eventImageUrls.push($scope.image)
        if i == 0
          #console.log($scope.eventImageUrls[i])
          $('.events .carousel-inner').append("<div class = 'item active'><img src = #{$scope.eventImageUrls[i]}></div>")
        else 
          #console.log('else')
          $('.events .carousel-inner').append("<div class = 'item'><img src = #{$scope.eventImageUrls[i]}></div>")
        i++
      $('#remove-image').css('display', 'inherit')
      if Object.keys(InkBlobs).length>1
        $('.event-profile').append("<a class = 'carousel-control left hidden-phone' data-slide = 'prev' href = '#event-carousel'> ‹ </a><a class = 'carousel-control right hidden-phone' data-slide = 'next' href = '#event-carousel'> › </a>")


  $scope.removeImages = ->
    currentImage = $(".active img").attr('src')
    $('.item.active').remove()
    $('.item:first-child').addClass('active')
    i = 0
    while i < $scope.eventImageUrls.length
      if currentImage == $scope.eventImageUrls[i]
        $scope.eventImageUrls.splice(i, 1)
      i++
    if $scope.eventImageUrls.length <= 1
      $('.carousel-control').remove()
    if $scope.eventImageUrls.length == 0
        $('#remove-image').css('display', 'none')
        $('.events .carousel-inner').append("<p>This is a default cover photo. <br> Replace by uploading cover images!</p><div class = 'item active default'><img alt='Food 26' src='/assets/Food 26.jpg'></div>")

  $scope.uploadMenu = ->
    filepicker.pickAndStore
      extension: '.pdf'
      services: ["COMPUTER", "GMAIL"]
      multiple: false
    ,
      location: "S3"
      access: "public"
    , (InkBlob) ->
      #console.log JSON.stringify(InkBlob)
      $scope.menuPdf="#{InkBlob[0].url}"
      #console.log $scope.menuPdf
      $('.events .menu').append("<a href =#{$scope.menuPdf}> Menu.pdf </a>")
      $('a#remove').css('display', 'inline')


  $scope.removeMenu = ->
    $scope.menuPdf = []
    $('.menu').empty()
    $('a#remove').css('display', 'none')

  $scope.createEvent = (event) ->
    #console.log($scope.eventImageUrls)
    #console.log($scope.menuPdf)
    if $scope.eventImageUrls?
      event.eventImageUrls=$scope.eventImageUrls
    if $scope.menuPdf?
      event.menuPdf=$scope.menuPdf
    new Event(event).create().then (data) =>
      #console.log data, "~~~~~~~~~~"
      $scope.created = true
      window.location.href = '/events/'+data.id
]

Simmr.controller "EventIndexCtrl", ["$scope",  "$routeParams", "$location", "Event", "Guest", ($scope, $routeParams, $location, Event, Guest) ->
  $scope.eventIDVar = ->
    $scope.eventID.toString()
    
  $scope.eventMonth = (event)->
    moment(event.month).format("MMM")

  $scope.showPayment = (wait) ->
    $scope.guests = []
    if $scope.num_guests > 0
      homie=$scope.currentUser
      currentGuy={}
      currentGuy.first_name=homie.first_name
      currentGuy.last_name=homie.last_name
      currentGuy.email=homie.email
      currentGuy.userId=homie.id
      currentGuy.eventId=$scope.eventId
      currentGuy.waiting=wait
      $scope.guests.push(currentGuy)
      i = 0
      
      while i < $scope.num_guests - 1
        $scope.guests.push({})
        i++
    if wait
      $scope.appear = "waitlist1"
    else
      $scope.appear = "payment1"
    
    console.log $scope.num_guests
    console.log $scope.guests

  $scope.addtoWaitlist = ->
    angular.forEach($scope.guests, (guest) =>
      guest.eventId=$scope.eventId
      guest.waiting=true
      new Guest(guest).create().then (data) =>
        console.log data, "~~~~~~~~~~~"
    )
    $scope.appear = "waitlist2"

]

Simmr.controller "EventEditCtrl", ["$scope",  "$routeParams", "$location", "Event", ($scope, $routeParams, $location, Event) ->
  $scope.eventImageUrls = []


  $scope.getEvent = (eventId) ->
    #console.log Event
    Event.get(id: eventId).then (result) ->
      $scope.event = result
      #console.log $scope.event, "++++++"

  $scope.today = moment().format("YYYY-MM-DD")
  $scope.imageUrls = []

  $scope.eventDate = ->
    moment($scope.event.date).format("dddd, MMMM D")

  $scope.eventTime = ->
    moment($scope.event.time, "YYYY-MM-DD H:mm:ss").format("h:mm A")
  
  $scope.eventEndTime = ->
    datetime = moment($scope.event.time,  "YYYY-MM-DD H:mm:ss")
    datetime.add('minutes', $scope.event.length).format('h:mm A')

  $scope.uploadMenu = ->
    #console.log($scope.eventMenu)
    filepicker.pickAndStore
      extension: '.pdf'
      services: ["COMPUTER", "GMAIL"]
      multiple: false
    ,
      location: "S3"
      access: "public"
    , (InkBlob) ->
      #console.log JSON.stringify(InkBlob)
      $scope.menuPdf="#{InkBlob[0].url}"
      #console.log $scope.menuPdf
      $('.events .menu').append("<a href =#{$scope.menuPdf}> Menu.pdf </a>")
      $('a#remove').css('display', 'inline')

  $scope.removeMenu = ->
    $scope.menuPdf = []
    $('.menu').empty()
    $('a#remove').css('display', 'none')

  $scope.uploadImages = ->
    #need to check if existing images are there to decide whether or not need an active class
    #console.log $scope.eventImages
    filepicker.pickAndStore
      mimetypes: ["image/*", "text/plain"]
      services: ["COMPUTER", "FACEBOOK", "GMAIL", "INSTAGRAM"]
      multiple: true
    ,
      location: "S3"
      access: "public"
    , (InkBlobs) ->
      #console.log JSON.stringify(InkBlobs)

      $('.default').remove()
      $('.carousel-inner').empty()
      $scope.eventImageUrls = []

      i=0
      while i< Object.keys(InkBlobs).length
        $scope.image="#{InkBlobs[i].url}"
        #console.log $scope.image
        $scope.eventImageUrls.push($scope.image)
        if i == 0
          #console.log($scope.eventImageUrls[i])
          $('.events .carousel-inner').append("<div class = 'item active'><img src = #{$scope.eventImageUrls[i]}></div>")
        else 
          #console.log('else')
          $('.events .carousel-inner').append("<div class = 'item'><img src = #{$scope.eventImageUrls[i]}></div>")
        i++
      $('#remove-image').css('display', 'inherit')
      if Object.keys(InkBlobs).length>1
        $('.event-profile').append("<a class = 'carousel-control left hidden-phone' data-slide = 'prev' href = '#event-carousel'> ‹ </a><a class = 'carousel-control right hidden-phone' data-slide = 'next' href = '#event-carousel'> › </a>")

  $scope.removeImages = ->
    currentImage = $(".active img").attr('src')
    $('.item.active').remove()
    $('.item:first-child').addClass('active')
    i = 0
    while i < $scope.eventImageUrls.length
      if currentImage == $scope.eventImageUrls[i]
        $scope.eventImageUrls.splice(i, 1)
      i++
    if $scope.eventImageUrls.length <= 1
      $('.carousel-control').remove()
    if $scope.eventImageUrls.length == 0
        $('#remove-image').css('display', 'none')
        $('.events .carousel-inner').append("<p>This is a default cover photo. <br> Replace by uploading cover images!</p><div class = 'item active default'><img alt='Food 26' src='/assets/Food 26.jpg'></div>")

  $scope.editEvent = (event) ->
    event.eventImageUrls=$scope.eventImageUrls
    event.menuPdf=$scope.menuPdf
    new Event(event).update().then (data) =>
      window.a=data
      $scope.event=data
      window.location.href = '/events/'+data.id
]

Simmr.controller "EventFeedbackCtrl", ["$scope",  "$routeParams", "$location", "Event", "Guest", ($scope, $routeParams, $location, Event, Guest) ->
  Simmr.scopes ||= {}  
  Simmr.scopes.post_event = $scope

  if location.search == '?waitList'
    $scope.waitlist = true

  $scope.guest = {}
  $scope.guest.first_name = ''
  $scope.guest.last_name = ''
  $scope.guest.email = ''

  $scope.showPayment = (wait) ->
    $scope.guests = []
    if $scope.num_guests > 0
      homie=$scope.currentUser
      currentGuy={}
      currentGuy.first_name=homie.first_name
      currentGuy.last_name=homie.last_name
      currentGuy.email=homie.email
      currentGuy.userId=homie.id
      currentGuy.eventId=$scope.eventId
      currentGuy.waiting=wait
      $scope.guests.push(currentGuy)
      i = 0
      
      while i < $scope.num_guests - 1
        $scope.guests.push({})
        i++
    if wait
      $scope.appear = "waitlist1"
    else
      $scope.appear = "payment1"
    
    #console.log $scope.num_guests
    #console.log $scope.guests

  $scope.addtoWaitlist = ->
    angular.forEach($scope.guests, (guest) =>
      guest.eventId=$scope.eventId
      guest.waiting=true
      new Guest(guest).create().then (data) =>
        #console.log data, "~~~~~~~~~~~"
    )
    $scope.appear = "waitlist2"

  $scope.mapUrl = ->
    mapUrl = "http://maps.google.com/?q=#{$scope.address1},#{$scope.city}, #{$scope.state},#{$scope.zipcode}"

  $scope.eventDate = ->
    moment($scope.event.date).format("dddd, MMMM D")

  $scope.eventTime = ->
    moment($scope.event.time, "YYYY-MM-DD H:mm:ss").format("h:mm A")
  
  $scope.eventEndTime = ->
    datetime = moment($scope.event.time,  "YYYY-MM-DD H:mm:ss")
    datetime.add('minutes', $scope.event.length).format('h:mm A')

]

Simmr.factory "Campaign", ["railsResourceFactory", (railsResourceFactory) ->
  railsResourceFactory
    url: "/api/campaigns"
    name: "campaign"
]

Simmr.controller "CampaignJoinCtrl", ["$scope", "$window", "$routeParams", "$location", "Campaign", ($scope, $window, $routeParams, $location, Campaign) ->

]

Simmr.controller "CampaignIndexCtrl", ["$scope", "$window", "$routeParams", "$location", "Campaign", ($scope, $window, $routeParams, $location, Campaign) ->

]

Simmr.controller "CampaignCreateCtrl", ["$scope", "$window", "$routeParams", "$location", "Campaign", ($scope, $window, $routeParams, $location, Campaign) ->

  $scope.campaignImageUrls = []

  $scope.uploadImages = ->
    filepicker.pickAndStore
      mimetypes: ["image/*", "text/plain"]
      services: ["COMPUTER", "FACEBOOK", "GMAIL", "INSTAGRAM"]
      multiple: true
    ,
      location: "S3"
      access: "public"
    , (InkBlobs) ->
      #console.log JSON.stringify(InkBlobs)

      $('.default').remove()
      $('.carousel-inner').empty()
      $scope.campaignImageUrls = []

      i=0
      while i< Object.keys(InkBlobs).length
        $scope.image="#{InkBlobs[i].url}"
        #console.log $scope.image
        $scope.campaignImageUrls.push($scope.image)
        if i == 0
          $('.campaigns .carousel-inner').append("<div class = 'item active'><img src = #{$scope.campaignImageUrls[i]}></div>")
        else 
          $('.campaigns .carousel-inner').append("<div class = 'item'><img src = #{$scope.campaignImageUrls[i]}></div>")
        i++
      $('#remove-image').css('display', 'inherit')
      if Object.keys(InkBlobs).length>1
        $('.campaign-profile').append("<a class = 'carousel-control left hidden-phone' data-slide = 'prev' href = '#campaign-carousel'> ‹ </a><a class = 'carousel-control right hidden-phone' data-slide = 'next' href = '#campaign-carousel'> › </a>")

  $scope.removeImages = ->
    currentImage = $(".active img").attr('src')
    $('.item').remove(":contains('#{currentImage}')")
    $('.carousel-inner div:first-child').append('.active')
    i = 0
    while i < $scope.campaignImageUrls.length
      if currentImage == $scope.campaignImageUrls[i]
        $scope.campaignImageUrls.splice(i, 1)
      i++
    if $scope.campaignImageUrls.length <= 1
      $('.carousel-control').remove()

  $scope.createCampaign = (campaign) ->
    if $scope.campaignImageUrls?
      campaign.campaignImageUrls=$scope.campaignImageUrls
    new Campaign(campaign).create().then (data) =>
      #console.log data, "~~~~~~~~~~"
      $scope.campaign = 1
      $window.location.href='/campaigns/'
]

Simmr.controller "CampaignEditCtrl", ["$scope",  "$routeParams", "$location", "Campaign", ($scope, $routeParams, $location, Campaign) ->
  $scope.getCampaign = (campaignId) ->
    #console.log campaignId
    Campaign.get(id: campaignId).then (result) ->
      #console.log result, "++++++++"
      $scope.campaign = result
  $scope.editCampaign = (campaign) ->
    new Campaign(campaign).update().then (data) =>
      window.a=data
      $scope.campaign=data
      window.location.href = '/campaigns/'+data.id

  $scope.campaignImageUrls = []

  $scope.uploadImages = ->
    filepicker.pickAndStore
      mimetypes: ["image/*", "text/plain"]
      services: ["COMPUTER", "FACEBOOK", "GMAIL", "INSTAGRAM"]
      multiple: true
    ,
      location: "S3"
      access: "public"
    , (InkBlobs) ->
      #console.log JSON.stringify(InkBlobs)

      $('.default').remove()
      $('.carousel-inner').empty()
      $scope.campaignImageUrls = []

      i=0
      while i< Object.keys(InkBlobs).length
        $scope.image="#{InkBlobs[i].url}"
        #console.log $scope.image
        $scope.campaignImageUrls.push($scope.image)
        if i == 0
          $('.campaigns .carousel-inner').append("<div class = 'item active'><img src = #{$scope.campaignImageUrls[i]}></div>")
        else 
          $('.campaigns .carousel-inner').append("<div class = 'item'><img src = #{$scope.campaignImageUrls[i]}></div>")
        i++
      $('#remove-image').css('display', 'inherit')
      if Object.keys(InkBlobs).length>1
        $('.campaign-profile').append("<a class = 'carousel-control left hidden-phone' data-slide = 'prev' href = '#campaign-carousel'> ‹ </a><a class = 'carousel-control right hidden-phone' data-slide = 'next' href = '#campaign-carousel'> › </a>")


  $scope.removeImages = ->
    currentImage = $(".active img").attr('src')
    $('.item').remove(":contains('#{currentImage}')")
    $('.carousel-inner div:first-child').append('.active')
    i = 0
    while i < $scope.campaignImageUrls.length
      if currentImage == $scope.campaignImageUrls[i]
        $scope.campaignImageUrls.splice(i, 1)
      i++
    if $scope.campaignImageUrls.length <= 1
      $('.carousel-control').remove()
]

